factor1
levels(covid19$`性別`) <- c("Male", "Female")
levels(covid19$`性別`)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
garbageRoutes$route<-factor(
str_extract(garbageRoutes$linename,"[:alnum:]+路線"))
newlevels<-names(sort(table(garbageRoutes$route)))
levels(garbageRoutes$route)<-newlevels
garbageRoutes$time<-
str_extract(garbageRoutes$linename,"(?<=線)[:graph:]+")
garbageRoutes$time[is.na(garbageRoutes$time)]<-"全天"
garbageRoutes$time<-factor(garbageRoutes$time)
levels(garbageRoutes$time)[[3]]<-"下午"
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights
# studentHeights
level(studentHeights$學年度)
# studentHeights
level(studentHeights$學年度)
# studentHeights
studentHeights$學年度 <-
factor(
studentHeights$學年度,
ordered=TRUE
)
studentHeights$年齡 <-
factor(
studentHeights$年齡,
ordered=TRUE
)
table(studentHeights$學年度) -> year
year <- sort(year)
newlevel <- names(year)
studentHeights$學年度 <-
factor(
studentHeights$學年度,levels = newlevel
)
# studentHeights
knitr::opts_chunk$set(echo = TRUE)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
studentHeights$學年度 <-
factor(
studentHeights$學年度,
ordered=TRUE
)
studentHeights$年齡 <-
factor(
studentHeights$年齡,
ordered=TRUE
)
studentHeights
# studentHeights
studentHeights$年齡層
# studentHeights$`年齡層`
studentHeights$年齡層 <-
factor(
studentHeights$年齡層,
ordered=TRUE
)
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
studentHeights
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
sort(studentHeights$`年齡層`)
#studentHeights$`年齡層`
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
sort(studentHeights$`年齡層`)->studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
class(studentHeights$`年齡層`)
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
sort(studentHeights$`年齡層`)->studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
mean(studentHeights$`年齡層`[[1]])
# averageHeightByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
ordered=TRUE
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
pick_6-8 <- studentHeights$`年齡層` <= 8
mean(studentHeights$`年齡層`[pick_6-8])
# averageHeightByGroup
pick_6 <- studentHeights$`年齡層` <= 8
mean(studentHeights$`年齡層`[pick_6])
# averageHeightByGroup
pick_6 <- studentHeights$`年齡層` = 6-8
mean(studentHeights$`年齡層`[pick_6])
# averageHeightByGroup
pick_6 <- studentHeights$`年齡層` == 6-8
mean(studentHeights$`年齡層`[pick_6])
# averageHeightByGroup
level_names <- levels(studentHeights$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+"
)
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`, names(startingAges)
)
studentHeights$`年齡層`
# studentHeights$`年齡層`
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
levels=c("6-8", "9-12", "13-15"),
ordered = T # 設定為可排序factor
)
pick_agein6to8 <- studentHeights$`年齡層` <= "6-8"
mean(studentHeights$`年齡層`[pick_agein6to8])
# averageHeightByGroup
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
levels=c("6-8", "9-12", "13-15"),
ordered = T # 設定為可排序factor
)
pick_agein6to8 <- studentHeights$`年齡層`== 6-8["平均身高"]
mean(studentHeights$`年齡層`[pick_agein6to8])
# averageHeightByGroup
studentHeights$`年齡層` <-
factor(
studentHeights$`年齡層`,
levels=c("6-8", "9-12", "13-15"),
ordered = T # 設定為可排序factor
)
pick_agein6to8 <- studentHeights$`年齡層`<= "6-8"
# averageHeightByGroup
differentMajors
# school
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
pick_小新 <- example$name == "小新"
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
map(dataList, is.numeric) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
population %>%
names(sort(.)) %>%
factor(cities, levels=.) -> cities
population %>%
{names(sort(.))} %>%
factor(cities, levels=.) -> cities
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome)
length(cpiByIncome)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
names(cpiByIncome)
length(cpiByIncome)
cpiByIncome[[1]]
names(cpiByIncome[[1]]) -> names_element1
names_element1
cpiByIncome[[1]]$Item
cpiByIncome[[2]]$Item
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
factor(items) -> items
items
# items
levels(items)
items -> family_type
levels(family_type) -> currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
items -> subcategory
levels(subcategory) -> currentLevels
str_extract(currentLevels,"(?<=#)[:graph:]+(?=\\()") -> newLevels
newLevels -> levels(subcategory)
subcategory
levels(subcategory)
# named vector: namedVector2
namedVector2
factor(
subcategory, levels=names(sort(namedVector2))
) -> subcategory
levels(subcategory)
levels(subcategory) -> currentLevels
str_extract(currentLevels, "([:graph:]+(?=\\.)|總指數)") -> chnNumberLevels
chineseNumbers <- "一二三四五六七"
chineseNumbers %>%
str_split("") %>%
unlist() -> chnVector
# unlist(str_split(chineseNumbers,"")) -> chnVector
namedVector <- 1:8
names(namedVector) <- c(chnVector,"總指數")
chnNumberLevels
namedVector[chnNumberLevels] -> namedVector2
names(namedVector2) <- currentLevels
subcategory <- factor(subcategory, levels=names(sort(namedVector2)))
# subcategory
namedVector2
cpiByIncome[[1]]$TYPE=="原始值"
cpiByIncome[[2]]$TYPE=="原始值"
cpiByIncome[[3]]$TYPE=="原始值"
map(cpiByIncome, ~.x$TYPE=="原始值") -> map_step
unlist(map_step) -> pick_values
cpiByIncome[pick_values] -> cpiValues
# cpiValues
cpiByIncome %>%
map(., ~.x$TYPE=="原始值") %>% # 一一取出元素做比對得到「要/不要」list
unlist(.) %>% # unlist成為「要/不要」向量
cpiByIncome[.] -> cpiValues # 取出符合條件元素
paste0(cpiValues[[1]]$TIME_PERIOD,"-01")
paste0(cpiValues[[2]]$TIME_PERIOD,"-01")
paste0(cpiValues[[3]]$TIME_PERIOD,"-01")
map(cpiValues,~ paste0(.x$TIME_PERIOD,"-01")) %>%
unlist(.) %>% #View()
ymd(.) -> temp
as.numeric(cpiValues[[1]]$Item_VALUE)
as.numeric(cpiValues[[2]]$Item_VALUE)
as.numeric(cpiValues[[3]]$Item_VALUE)
map(cpiValues, ~ as.numeric(.x$Item_VALUE)) -> map_step
unlist(map_step) -> Item_VALUE
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
dateInput <- today()
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
